openapi: 3.1.0
info:
  title: Mapache MCP Bridge
  version: "1.1.0"
servers:
  - url: /
paths:
  /healthz:
    get:
      operationId: healthz
      responses:
        "200":
          description: ok
          content:
            text/plain:
              schema: { type: string }
  /tools:
    get:
      operationId: tools
      description: List connected MCP servers/tools.
      responses:
        "200":
          description: Tool list
          content:
            application/json:
              schema:
                type: object
                properties:
                  hosted: { type: array, items: { type: object } }
                  streamable: { type: array, items: { type: object } }
                  count: { type: integer }
  /run:
    post:
      operationId: run
      description: Run an MCP-enabled agent against the user's prompt.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [prompt]
              properties:
                prompt:
                  type: string
      responses:
        "200":
          description: Agent response
          content:
            application/json:
              schema:
                type: object
                properties:
                  output: { type: string }
                  toolEvents: { type: array, items: { type: object } }
                  citations: { type: array, items: { type: object } }
        "500":
          description: Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }

  /linear/commentCreate:
    post:
      operationId: linear_commentCreate
      description: Create a Linear comment on an issue and verify persistence.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [issueId, body]
              properties:
                issueId: { type: string, description: "Linear issue UUID" }
                body:    { type: string, description: "Comment body (markdown supported)" }
                clientMutationId: { type: string }
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  comment:
                    type: object
                    properties:
                      id: { type: string }
                      body: { type: string }
                      createdAt: { type: string }
        "4XX":
          description: Request error
        "5XX":
          description: Upstream or verification failure

  /linear/comments:
    get:
      operationId: linear_comments
      description: List comments for a Linear issue.
      parameters:
        - in: query
          name: issueId
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  issue: { type: string }
                  comments:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string }
                        body: { type: string }
                        createdAt: { type: string }

  /linear/issueCreate:
    post:
      operationId: linearIssueCreate
      description: Create a Linear issue in the team's Backlog (deterministic fallback).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [teamId, title]
              properties:
                teamId: { type: string }
                title:  { type: string }
                description: { type: string }
                labels: { type: array, items: { type: string } }
                priority: { type: integer, minimum: 0, maximum: 4 }
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  issue:
                    type: object
                    properties:
                      id:         { type: string }
                      identifier: { type: string }
                      title:      { type: string }
                      url:        { type: string }

  /linear/teams:
    get:
      operationId: linearTeams
      description: List Linear teams for discovery.
      responses:
        "200":
          description: Teams
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:   { type: string }
                    key:  { type: string }
                    name: { type: string }
                    url:  { type: string }
